import 'dart:math';
import '../../../screens/userProfile/profile_data.dart';
import 'package:fitness_tracker/features/services/fitbot_assitance/recommend_activityLevel.dart';

/// L·ªõp ch·ª©a th√¥ng tin v·ªÅ m·ª•c ti√™u ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
class ActivityTarget {
  final double targetDistance; // km
  final int targetSteps;
  final int targetCalories;
  final double targetWater;

  ActivityTarget({
    required this.targetDistance,
    required this.targetSteps,
    required this.targetCalories,
    required this.targetWater,
  });

  @override
  String toString() {
    return 'ActivityTarget(distance: '
        '[32m$targetDistance[0m, steps: '
        '[34m$targetSteps[0m, calories: '
        '[31m$targetCalories[0m)';
  }

  /// T√≠nh to√°n m·ª•c ti√™u d·ª±a tr√™n th√¥ng tin ng∆∞·ªùi d√πng
  static ActivityTarget calculateFromProfile(ProfileData profile) {
    final weight = profile.weight ?? 60.0; // kg
    final height = profile.height ?? 170.0; // cm
    final age = profile.age ?? 30;
    final gender = profile.gender?.toLowerCase() ?? 'male';
    final activityLevel = profile.activityLevel?.toLowerCase() ?? 'moderate';
    final goal = profile.goal?.toLowerCase() ?? 'maintain';

    // T√≠nh BMR (Basal Metabolic Rate) theo c√¥ng th·ª©c Mifflin-St Jeor
    double bmr;
    if (gender == 'male') {
      bmr = 10 * weight + 6.25 * height - 5 * age + 5;
    } else {
      bmr = 10 * weight + 6.25 * height - 5 * age - 161;
    }

    // T√≠nh TDEE (Total Daily Energy Expenditure) d·ª±a tr√™n m·ª©c ƒë·ªô ho·∫°t ƒë·ªông
    double tdee = bmr;
    switch (activityLevel) {
      case 'sedentary':
        tdee *= 1.2; // √çt v·∫≠n ƒë·ªông
        break;
      case 'light':
        tdee *= 1.375; // Nh·∫π (1-3 ng√†y/tu·∫ßn)
        break;
      case 'moderate':
        tdee *= 1.55; // V·ª´a ph·∫£i (3-5 ng√†y/tu·∫ßn)
        break;
      case 'active':
        tdee *= 1.725; // NƒÉng ƒë·ªông (6-7 ng√†y/tu·∫ßn)
        break;
      case 'very active':
        tdee *= 1.9; // R·∫•t nƒÉng ƒë·ªông (2 l·∫ßn/ng√†y)
        break;
      default:
        tdee *= 1.55; // M·∫∑c ƒë·ªãnh l√† v·ª´a ph·∫£i
    }

    // ƒêi·ªÅu ch·ªânh TDEE d·ª±a tr√™n m·ª•c ti√™u
    double targetCalories;
    switch (goal) {
      case 'lose':
        targetCalories = tdee - 500; // Gi·∫£m 500 cal ƒë·ªÉ gi·∫£m c√¢n
        break;
      case 'gain':
        targetCalories = tdee + 500; // TƒÉng 500 cal ƒë·ªÉ tƒÉng c√¢n
        break;
      case 'maintain':
      default:
        targetCalories = tdee; // Duy tr√¨ c√¢n n·∫∑ng
    }

    // T√≠nh m·ª•c ti√™u calories ƒë·ªët ch√°y t·ª´ ho·∫°t ƒë·ªông th·ªÉ ch·∫•t (30% c·ªßa TDEE)
    final activityCalories = (tdee * 0.3).round();

    // T√≠nh m·ª•c ti√™u b∆∞·ªõc ch√¢n d·ª±a tr√™n m·ª©c ƒë·ªô ho·∫°t ƒë·ªông v√† m·ª•c ti√™u
    int targetSteps;
    switch (activityLevel) {
      case 'sedentary':
        targetSteps = 5000;
        break;
      case 'light':
        targetSteps = 7500;
        break;
      case 'moderate':
        targetSteps = 10000;
        break;
      case 'active':
        targetSteps = 12500;
        break;
      case 'very active':
        targetSteps = 15000;
        break;
      default:
        targetSteps = 10000; // M·∫∑c ƒë·ªãnh l√† 10,000 b∆∞·ªõc
    }

    // ƒêi·ªÅu ch·ªânh m·ª•c ti√™u b∆∞·ªõc ch√¢n d·ª±a tr√™n m·ª•c ti√™u
    if (goal == 'lose') {
      targetSteps = (targetSteps * 1.2).round();
    } else if (goal == 'gain') {
      targetSteps = (targetSteps * 0.8).round();
    }

    // T√≠nh chi·ªÅu d√†i b∆∞·ªõc ch√¢n (m√©t)
    double stepLength;
    if (gender == 'male') {
      stepLength = height * 0.415 / 100; // cm -> m
    } else {
      stepLength = height * 0.413 / 100;
    }

    // T√≠nh qu√£ng ƒë∆∞·ªùng (km)
    double targetDistance = (targetSteps * stepLength) / 1000;

    return ActivityTarget(
      targetDistance: double.parse(
        targetDistance.toStringAsFixed(2),
      ), // l√†m tr√≤n 2 s·ªë l·∫ª
      targetSteps: targetSteps,
      targetCalories: activityCalories,
      targetWater: 2.0,
    );
  }

  /// T√≠nh to√°n m·ª•c ti√™u d·ª±a tr√™n BMI
  static ActivityTarget calculateFromBMI(ProfileData profile) {
    final weight = profile.weight ?? 60.0; // kg
    final height = profile.height ?? 170.0; // cm
    final bmi = profile.bmi ?? (weight / pow(height / 100, 2));

    // X√°c ƒë·ªãnh m·ª•c ti√™u d·ª±a tr√™n BMI
    int targetSteps;
    double targetDistance;
    int targetCalories;

    if (bmi < 18.5) {
      // Thi·∫øu c√¢n
      targetSteps = 8000;
      targetDistance = 5.6; // km
      targetCalories = 300;
    } else if (bmi < 25) {
      // B√¨nh th∆∞·ªùng
      targetSteps = 10000;
      targetDistance = 7.0; // km
      targetCalories = 400;
    } else if (bmi < 30) {
      // Th·ª´a c√¢n
      targetSteps = 12000;
      targetDistance = 8.4; // km
      targetCalories = 500;
    } else {
      // B√©o ph√¨
      targetSteps = 15000;
      targetDistance = 10.5; // km
      targetCalories = 600;
    }

    return ActivityTarget(
      targetDistance: targetDistance,
      targetSteps: targetSteps,
      targetCalories: targetCalories,
      targetWater: 2.0,
    );
  }

  /// L·∫•y m·ª•c ti√™u ph√π h·ª£p nh·∫•t d·ª±a tr√™n profile
  static Future<ActivityTarget> getRecommendedTarget(
    ProfileData profile,
  ) async {
    // Lu√¥n th·ª≠ l·∫•y target t·ª´ AI n·∫øu ƒë·ªß th√¥ng tin profile
    if (profile.age != null &&
        profile.weight != null &&
        profile.height != null &&
        profile.bmi != null &&
        profile.goal != null) {
      final aiResult = await recommendDailyTarget(
        userId: 'default_user',
        age: profile.age!,
        weight: profile.weight!,
        height: profile.height!,
        bmi: profile.bmi!,
        goal: profile.goal!,
      );
      if (aiResult.isNotEmpty) {
        return ActivityTarget(
          targetDistance: (aiResult['distance'] as num?)?.toDouble() ?? 7.0,
          targetSteps: (aiResult['steps'] as num?)?.toInt() ?? 10000,
          targetCalories: (aiResult['calories'] as num?)?.toInt() ?? 400,
          targetWater: (aiResult['water'] as num?)?.toDouble() ?? 8.0,
        );
      } else {
        print(
          '[DEBUG] aiResult r·ªóng ho·∫∑c parse l·ªói, fallback v·ªÅ logic truy·ªÅn th·ªëng',
        );
      }
    }
    // N·∫øu kh√¥ng ƒë·ªß th√¥ng tin ho·∫∑c AI kh√¥ng tr·∫£ v·ªÅ, fallback logic c≈©
    if (profile.weight != null &&
        profile.height != null &&
        profile.age != null) {
      return calculateFromProfile(profile);
    } else if (profile.bmi != null) {
      return calculateFromBMI(profile);
    } else {
      return ActivityTarget(
        targetDistance: 7.0,
        targetSteps: 10000,
        targetCalories: 400,
        targetWater: 2.0,
      );
    }
  }
}
